/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package LALG.Interface;

import LALG.AnalisadorSintatatico.Procedimento;
import LALG.AnalisadorSintatatico.Syntax;
import LALG.AnalisadorSintatatico.Var;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ediney Lopes, Fellipe Abib, Mateus Pereira
 *
 */
public class ViewContextTable extends javax.swing.JFrame {

    /** Creates new form ViewContextTable */
    public ViewContextTable() {
        initComponents();
        initializeTable();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ViewContextTable().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    public void initializeTable() {
        DefaultTableModel modelo = (DefaultTableModel) this.jTable1.getModel();

        System.out.println("Check1");
        modelo.addColumn("Natureza");
        modelo.addColumn("Escopo");
        modelo.addColumn("Nome");
        modelo.addColumn("Tipo");
        modelo.addColumn("Quantidade de Parâmetros");
        modelo.addColumn("Ordem");

        List<Procedimento> proc_l = Syntax.contexto.proc;

        for (int i = 0; i < proc_l.size(); i+=2){
            Procedimento procedimento = proc_l.get(i);
            System.out.println("Check2");
            /*Procedimentos*/
            List<Var> listpar = procedimento.getPar();
            String ordem_par = "";
            for (int y = 0; y < listpar.size(); y++) {
                if (listpar.size() == 1) {
                    ordem_par += "<" + listpar.get(y).tipo + ">";
                } else {
                    if (y == 0) {
                        ordem_par += "<" + listpar.get(y).tipo + ";";
                    }
                    if (y == listpar.size() - 1) {
                        ordem_par += listpar.get(y).tipo + ">";
                    }
                    if (y != 0 && y != listpar.size() - 1) {
                        ordem_par += listpar.get(y).tipo + ";";
                    }
                }
            }
            System.out.println("Ordem: " + ordem_par);
            if (procedimento.ident.equals("main")) {
                modelo.addRow(new String[]{"Procedimento Principal", procedimento.ident, procedimento.ident, "", Integer.toString(procedimento.par_count()), ordem_par});
            } else {
                modelo.addRow(new String[]{"Procedimento", procedimento.ident, procedimento.ident, "", Integer.toString(procedimento.par_count()), ordem_par});
            }

            /*Variáveis*/
            List<Var> listvar = procedimento.getVar();
            for (int y = 0; y < listvar.size(); y++) {
                modelo.addRow(new String[]{"Variável", procedimento.ident, listvar.get(y).ident, listvar.get(y).tipo, "", ""});
            }
            /*Parêmetros*/
            for (int y = 0; y < listpar.size(); y++) {
                modelo.addRow(new String[]{"Parâmetro", procedimento.ident, listpar.get(y).ident, listpar.get(y).tipo, "", ""});
            }
            jTable1 = new JTable(modelo);
        }
    }
}
